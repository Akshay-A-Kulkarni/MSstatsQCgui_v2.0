column(6,wellPanel(style=cardCSS, mod1p,br(),br())),
column(6,wellPanel(style=cardCSS, mod2p,br(),br())),
# column(4,wellPanel(style=cardCSS, mod3p)),
),
column(10,offset=1, h3("About"),includeMarkdown("www/include.md"))),
br(),br(),
)
)
# Callbacks on the server side for the sample pages
home_server <- function(input, output, session) {
observeEvent(input$switch_mod2, {
if (!is_page("module2")) {
change_page("module2")}
})
observeEvent(input$help_mod2, {
showModal(modalDialog(
title = "More Info",
size = "l",
includeMarkdown("www/mod2.md"),
easyClose = TRUE
))
})
observeEvent(input$switch_mod1, {
if (!is_page("module1")) {
change_page("module1")}
})
observeEvent(input$help_mod1, {
showModal(modalDialog(
title = "More Info",
size = "l",
includeMarkdown("www/mod1.md"),
easyClose = TRUE
))
})
}
# Create routing. We provide routing path, a UI as well as a server-side callback for each page.
router <- shiny.router::make_router(
shiny.router::route("home", home_page, home_server),
shiny.router::route("module1", mod1_ui, mod1_server),
shiny.router::route("module2", mod2_ui, mod2_server)
)
# Create output for our router in main UI of Shiny app.
ui <- shinyUI(fluidPage(
waiter::use_waiter(),
shinyjs::useShinyjs(),
shinyFeedback::useShinyFeedback(),
waiter::use_waitress(),
shiny.router::router_ui()
))
# Plug router into Shiny server.
server <- shinyServer(function(input, output, session) {
router(input, output, session)
loading_screen <- tagList(
h3("Initializing MSstatsQC", style = "color:white;"),
br(),
waiter::spin_flower(),
div(style='padding:15vh')
)
loadScreen <- Waiter$new(html = loading_screen, color='#242424')
loadScreen$show()
Sys.sleep(2)
loadScreen$update(html = tagList(img(src="logo.png", height=150),div(style='padding:15vh')))
Sys.sleep(1)
loadScreen$hide()
})
# Run server in a standard way.
shinyApp(ui=ui, server=server)
search()
search()$imports
View(add_annotations)
plots[[i]] <- plot_ly(data, x = ~Metric, y = ~Value, color = ~Metric, type = "box") %>%
layout(
annotations = list(
list(x = 0.5 , y = 1, text = peptide, showarrow = F, xref='paper', yref='paper')
),showlegend = FALSE)
plot.data <- as.data.frame(plot.data)
shiny::runApp()
shiny::runApp()
runApp('~/Desktop/GitHub/MSstatsQCgui_v2.0')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("renv")
renv::init()
renv::activate()
renv::dependencies()
install.packages('renv')
renv::init()
renv::snapshot()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(h2o)
library(MASS)
library(ggplot2)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
install.packages(c("car", "FrF2", "h2o", "lime"))
source("MSStatsQC.ML.trainR.R")
source("MSStatsQC.ML.testR.R")
guide.set <- read.csv("dda_guide_set.csv")
test.set <- read.csv("dda_test_set.csv")
View(guide.set)
View(guide.set)
# MSstatsQC.ML.trainR(guide.set[,], sim.size=1000, guide.set.annotations = NULL)
# MSstatsQC.ML.trainR(guide.set, sim.size=1000, guide.set.annotations = guide.set.DDA.anno)
rf_model <- MSstatsQC.ML.trainR(guide.set, sim.size=1000)
library(h2o)
library(h2o)
library(MASS)
library(ggplot2)
library(stats)
library(FrF2)
library(car)
library(MASS)
library(ggplot2)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
# MSstatsQC.ML.trainR(guide.set[,], sim.size=1000, guide.set.annotations = NULL)
# MSstatsQC.ML.trainR(guide.set, sim.size=1000, guide.set.annotations = guide.set.DDA.anno)
rf_model <- MSstatsQC.ML.trainR(guide.set, sim.size=1000)
new.test<-rbind(guide.set[,], test.set[test.set$idfile>41234&test.set$idfile<41505 ,])
new.test<-rbind(guide.set[201:838,], test.set[1:200,])
x <- MSstatsQC.ML.testR(new.test, guide.set)
plot(x$dec)
library(h2o)
library(MASS)
library(ggplot2)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
library(h2o)
library(MASS)
library(ggplot2)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
source("MSStatsQC.ML.trainR.R")
source("MSStatsQC.ML.testR.R")
guide.set <- read.csv("dda_guide_set.csv")
test.set <- read.csv("dda_test_set.csv")
# guide.set <- read.csv("Sampledata_CPTAC_Study_9_1_Site54_GUIDE.csv")
# test.set <- read.csv("Sampledata_CPTAC_Study_9_1_Site54_TEST.csv")
# MSstatsQC.ML.trainR(guide.set[,], sim.size=1000, guide.set.annotations = NULL)
# MSstatsQC.ML.trainR(guide.set, sim.size=1000, guide.set.annotations = guide.set.DDA.anno)
rf_model <- MSstatsQC.ML.trainR(guide.set, sim.size=1000)
new.test<-rbind(guide.set[,], test.set[test.set$idfile>41234&test.set$idfile<41505 ,])
new.test<-rbind(guide.set[201:838,], test.set[1:200,])
x <- MSstatsQC.ML.testR(new.test, guide.set)
library(h2o)
library(MASS)
library(ggExtra)
library(ggplot2)
library(gridExtra)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
library(dplyr)
source("MSStatsQC.ML.trainR.R")
source("MSStatsQC.ML.testR.R")
guide.set <- read.csv("dda_guide_set.csv")
test.set <- read.csv("dda_test_set.csv")
guide.set <- read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv")
test.set <- read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_test_set.csv")
View(test.set)
View(test.set)
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("bit64")
runApp()
runApp()
runApp()
guide.set <- read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv")
View(guide.set)
View(guide.set)
runApp()
runApp()
runApp()
runApp()
runApp()
guide.set <- read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv")
test.set <- read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_test_set.csv")
guide.set <- read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv")
test.set <- read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_test_set.csv")
df1 <- rbind(guideset,testset)
df1 <- rbind(guide.set,test.set)
data$df <- input_checking(df1)
data <- input_checking(df1)
print(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
source("MSStatsQC.ML.trainR.R")
source("MSStatsQC.ML.testR.R")
library(h2o)
library(MASS)
library(ggExtra)
library(ggplot2)
library(gridExtra)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
library(dplyr)
guide.set <- input_checking(read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv"))
guide.set <- input_checking(read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv"))
View(guide.set)
View(guide.set)
test.set <- input_checking(read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_test_set.csv"))
# MSstatsQC.ML.trainR(guide.set[,], sim.size=1000, guide.set.annotations = NULL)
# MSstatsQC.ML.trainR(guide.set, sim.size=1000, guide.set.annotations = guide.set.DDA.anno)
rf_model <- MSstatsQC.ML.trainR(guide.set, sim.size=1000)
setwd("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/")
guide.set <- input_checking(read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv"))
test.set <- input_checking(read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_test_set.csv"))
# MSstatsQC.ML.trainR(guide.set[,], sim.size=1000, guide.set.annotations = NULL)
# MSstatsQC.ML.trainR(guide.set, sim.size=1000, guide.set.annotations = guide.set.DDA.anno)
rf_model <- MSstatsQC.ML.trainR(guide.set, sim.size=1000)
MSstatsQC.ML.trainR
# MSstatsQC.ML.trainR(guide.set[,], sim.size=1000, guide.set.annotations = NULL)
# MSstatsQC.ML.trainR(guide.set, sim.size=1000, guide.set.annotations = guide.set.DDA.anno)
rf_model <- MSstatsQC.ML.trainR(guide.set, sim.size=1000)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
git branch
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
guide.set <- input_checking(read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv"))
guide.set
guide.set <- input_checking(read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv"))
guide.set <- (read.csv("/Users/akshaykulkarni/Desktop/GitHub/MSstatsQCgui_v2.0/Datasets/dda_guide_set.csv"))
guide.set
x <- c("Precursor", "TotalArea")
guide.set[x]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::status()
renv::snapshot()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
validate(
need(!is.null(data$df), "Please upload your data"),
need(is.data.frame(data$df), data$df)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gtest <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54_GUIDE.csv", stringsAsFactors = T)
gtest
cbind(gtest,"PASS")
?bctrans.test
??bctrans.test
gtest
gtest <- read.csv("./Datasets/dda_guide_set.csv", stringsAsFactors = T)
add_features(gtest)
gtest
add_features(gtest[4:7])
view(add_features(gtest[4:7]))
View(add_features(gtest[4:7]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/GitHub/MSstatsQCgui_v2.0/src/module2-server.R')
renv::snapshot()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotlyOutput
?plotOutput
renderPlot()
runApp()
runApp()
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/data-validation.R")
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/data-validation.R")
guide.set <- input_checking(read.csv("./Datasets/simData_guide.csv", stringsAsFactors = T))
test.set <- input_checking(read.csv("./Datasets/simData_test.csv", stringsAsFactors = T))
trained_model <- MSstatsQC.ML.trainR(guide.set, use_simulation=T, sim.size=10)
ML_plots <- MSstatsQC.ML.testR(test.set, guide.set, rf_model = trained_model)
View(ML_plots)
View(ML_plots)
for (variable in ML_plots) {
print(variable)
}
View(ML_plots)
View(ML_plots)
View(ML_plots)
View(ML_plots)
length(ML_plots)
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/data-validation.R")
guide.set <- input_checking(read.csv("./Datasets/simData_guide.csv", stringsAsFactors = T))
test.set <- input_checking(read.csv("./Datasets/simData_test.csv", stringsAsFactors = T))
trained_model <- MSstatsQC.ML.trainR(guide.set, use_simulation=T, sim.size=10)
ML_plots <- MSstatsQC.ML.testR(test.set, guide.set, rf_model = trained_model)
View(ML_plots)
View(ML_plots)
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/data-validation.R")
guide.set <- input_checking(read.csv("./Datasets/simData_guide.csv", stringsAsFactors = T))
test.set <- input_checking(read.csv("./Datasets/simData_test.csv", stringsAsFactors = T))
trained_model <- MSstatsQC.ML.trainR(guide.set, use_simulation=T, sim.size=10)
ML_plots <- MSstatsQC.ML.testR(test.set, guide.set, rf_model = trained_model)
View(ML_plots)
View(ML_plots)
runApp()
source("./src/MSstatsQC.ML.trainR.R")
source("./src/MSstatsQC.ML.testR.R")
source("./src/data-validation.R")
guide.set <- input_checking(read.csv("./Datasets/simData_guide.csv", stringsAsFactors = T))
test.set <- input_checking(read.csv("./Datasets/simData_test.csv", stringsAsFactors = T))
trained_model <- MSstatsQC.ML.trainR(guide.set, use_simulation=T, sim.size=10)
ML_plots <- MSstatsQC.ML.testR(test.set, guide.set, rf_model = trained_model)
length(ML_plots)
ML_plots
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
