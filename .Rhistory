fig
dat2 <- test %>% mutate_at(metrics, ~(scale(.) %>% as.vector))
View(dat2)
View(dat2)
dat2 <- test %>% filter(Precursor == peptides[[1]])
dat2 <- test %>% filter(Precursor == peptides[[1]]) %>% mutate_at(metrics, ~(scale(.) %>% as.vector))
dat2 <- test %>% filter(Precursor == peptides[[1]])
dat2 <- test %>% filter(Precursor == peptides[[1]]) %>% mutate_at(metrics, ~(scale(.) %>% as.vector))
dat2 <- test %>% filter(Precursor == peptides[[1]])
dat2 <- test %>% filter(Precursor == peptides[[1]]) %>% mutate_at(metrics, ~(scale(.) %>% as.vector))
dat3 <- dat2  %>% %>% select(Precursor,metrics) %>% pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
dat3 <- dat2 %>% select(Precursor,metrics) %>% pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
View(dat3)
View(dat3)
metrics_box.plot <- function(prodata, data.peptides, ret_obj_list = T) {
plots <- list()
for(i in seq_len(length(data.peptides))) {
peptide <- data.peptides[i]
data <- prodata %>% filter(Precursor == peptide) %>% mutate_at(metrics, ~(scale(.) %>% as.vector)) %>% select(Precursor,metrics) %>%
pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
plots[[i]] <- plot_ly(data, x = ~Metric, y = ~Value, color = ~Metric, type = "box") %>%
layout(
annotations = list(
list(x = 0.5 , y = 1, text = metric, showarrow = F, xref='paper', yref='paper')
),showlegend = FALSE)
#layout(yaxis = list(title = metric),showlegend = FALSE)
}
if (ret_obj_list == F){
height <- (length(data.peptides))*300
p <- do.call(subplot,c(plots,nrows= floor(length(plots)/2))) %>%
layout(autosize = TRUE, height = height,margin = unit(c(3, 1, 1, 1), "lines"))
return(p)}
else{
return(plots)
}
}
p <-  metrics_box.plot(test, peptides)
metrics_box.plot <- function(prodata, data.peptides, ret_obj_list = T) {
plots <- list()
for(i in seq_len(length(data.peptides))) {
peptide <- data.peptides[i]
data <- prodata %>% filter(Precursor == peptide) %>% mutate_at(metrics, ~(scale(.) %>% as.vector)) %>% select(Precursor,metrics) %>%
pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
plots[[i]] <- plot_ly(data, x = ~Metric, y = ~Value, color = ~Metric, type = "box") %>%
layout(
annotations = list(
list(x = 0.5 , y = 1, text = peptide, showarrow = F, xref='paper', yref='paper')
),showlegend = FALSE)
#layout(yaxis = list(title = metric),showlegend = FALSE)
}
if (ret_obj_list == F){
height <- (length(data.peptides))*300
p <- do.call(subplot,c(plots,nrows= floor(length(plots)/2))) %>%
layout(autosize = TRUE, height = height,margin = unit(c(3, 1, 1, 1), "lines"))
return(p)}
else{
return(plots)
}
}
p <-  metrics_box.plot(test, peptides)
ggplotly(p[[1]])
dat2 <- test %>% filter(Precursor == peptides[[1]]) %>% mutate_at(metrics, ~(normalize(., method = "range", range = c(0, 1), margin = 1L, on.constant = "quiet") %>% as.vector))
test <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54_GUIDE.csv", stringsAsFactors = T)
dat2 <- test %>% filter(Precursor == peptides[[1]]) %>% mutate_at(metrics, ~(scale(., center = F) %>% as.vector))
dat3 <-  dat2 %>% select(Precursor,metrics) %>% pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
fig <- plot_ly(dat3, x = ~Metric, y = ~Value, color = ~Metric, type = "box")
fig
dat2 <- test %>% filter(Precursor == peptides[[1]]) %>% mutate_at(metrics, ~(scale(., center = T) %>% as.vector))
dat3 <-  dat2 %>% select(Precursor,metrics) %>% pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
temp <- test %>% select(Precursor,metrics) %>% pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
fig <- plot_ly(dat3, x = ~Metric, y = ~Value, color = ~Metric, type = "box")
fig
p <-  metrics_box.plot(test, peptides)
ggplotly(p[[1]])
metrics_box.plot <- function(prodata, data.peptides, ret_obj_list = T) {
plots <- list()
for(i in seq_len(length(data.peptides))) {
peptide <- data.peptides[i]
data <- prodata %>% filter(Precursor == peptide) %>% mutate_at(metrics, ~(scale(., center = F) %>% as.vector)) %>% select(Precursor,metrics) %>%
pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
plots[[i]] <- plot_ly(data, x = ~Metric, y = ~Value, color = ~Metric, type = "box") %>%
layout(
annotations = list(
list(x = 0.5 , y = 1, text = peptide, showarrow = F, xref='paper', yref='paper')
),showlegend = FALSE)
#layout(yaxis = list(title = metric),showlegend = FALSE)
}
if (ret_obj_list == F){
height <- (length(data.peptides))*300
p <- do.call(subplot,c(plots,nrows= floor(length(plots)/2))) %>%
layout(autosize = TRUE, height = height,margin = unit(c(3, 1, 1, 1), "lines"))
return(p)}
else{
return(plots)
}
}
p <-  metrics_box.plot(test, peptides)
ggplotly(p[[1]])
metrics_box.plot <- function(prodata, data.peptides, ret_obj_list = T) {
plots <- list()
for(i in seq_len(length(data.peptides))) {
peptide <- data.peptides[i]
data <- prodata %>% filter(Precursor == peptide)
data <-  data %>% mutate_at(metrics, ~(scale(., center = F) %>% as.vector))
data <-  data %>% select(Precursor,metrics) %>% pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
plots[[i]] <- plot_ly(data, x = ~Metric, y = ~Value, color = ~Metric, type = "box") %>%
layout(
annotations = list(
list(x = 0.5 , y = 1, text = peptide, showarrow = F, xref='paper', yref='paper')
),showlegend = FALSE)
#layout(yaxis = list(title = metric),showlegend = FALSE)
}
if (ret_obj_list == F){
height <- (length(data.peptides))*300
p <- do.call(subplot,c(plots,nrows= floor(length(plots)/2))) %>%
layout(autosize = TRUE, height = height,margin = unit(c(3, 1, 1, 1), "lines"))
return(p)}
else{
return(plots)
}
}
p <-  metrics_box.plot(test, peptides)
ggplotly(p[[1]])
shiny::runApp()
runApp()
runApp()
runApp()
peptide_box.plot <- function(prodata, data.peptides, data.metrics, ret_obj_list = T) {
plots <- list()
for(i in seq_len(length(data.peptides))) {
peptide <- data.peptides[i]
data <- prodata %>% filter(Precursor == peptide)
data <-  data %>% mutate_at(data.metrics, ~(scale(., center = T) %>% as.vector))
data <-  data %>% select(Precursor,data.metrics) %>% pivot_longer(-Precursor, names_to = "Metric", values_to = "Value")
plots[[i]] <- plot_ly(data, x = ~Metric, y = ~Value, color = ~Metric, type = "box") %>%
layout(
annotations = list(
list(x = 0.5 , y = 1, text = peptide, showarrow = F, xref='paper', yref='paper')
),showlegend = FALSE)
}
if (ret_obj_list == F){
height <- (length(data.peptides))*300
p <- do.call(subplot,c(plots,nrows= floor(length(plots)/2))) %>%
layout(autosize = TRUE, height = height,margin = unit(c(3, 1, 1, 1), "lines"))
return(p)}
else{
return(plots)
}
}
test <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54_GUIDE.csv", stringsAsFactors = T)
metrics <- c(find_custom_metrics(test))
peptides <- c(levels(test$Precursor))
p <-  peptide_box.plot(test, peptides, metrics)
ggplotly(p[[1]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(h2o)
library(h2o)
h2o.init()
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Import the prostate dataset
CPTAC_full <- h2o.importFile(path = "./Datasets/Sampledata_CPTAC_Study_9_1_Site54_GUIDE.csv",
destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=prostate.hex, ratios=0.75)
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Create a testing set from the 2nd dataset in the split
test <- CPTAC_split[[2]]
# Build an Isolation forest model
seed = 12345
ntrees = 100
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
# Calculate score
score <- h2o.predict(model, test)
result_pred <- score$predict
print(result_pred)
View(CPTAC_split)
library(h2o)
h2o.init()
# Import the prostate dataset
CPTAC_full <- h2o.importFile(path = "./Datasets/Sampledata_CPTAC_Study_9_1_Site54_GUIDE.csv",
destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Create a testing set from the 2nd dataset in the split
test <- CPTAC_split[[2]]
# Build an Isolation forest model
seed = 12345
ntrees = 100
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
# Calculate score
score <- h2o.predict(model, test)
result_pred <- score$predict
View(result_pred)
View(result_pred)
View(score)
View(score)
print(score)
df <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv")
View(df)
install.packages('anomalize')
library(anomalize) #tidy anomaly detectiom
library(tidyverse)
library(dplyr)
df <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv")
df
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(rowname)) %>% select(-one_of('rowname'))
library(dplyr)
install.packages("tidyverse
")
install.packages("tidyverse")
library(tidyverse)
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(rowname)) %>% select(-one_of('rowname'))
)
df_ts <- df %>% as.tibble() %>% mutate(date = as.Date(AcquiredTime))
df_ts <- df %>% as.tibble() %>% mutate(date = as.Date(AcquiredTime, format = "%m/%d/%Y %h:%m"))
View(df_ts)
View(df_ts)
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%Y %h:%m")) %>%
filter(Precursor == "LVNELTEFAK") %>%
select(AcquiredTime,Best.RT)
df_ts %>%
time_decompose(Best.RT, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%Y %h:%m"))
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%y %h:%m")) %>%
# filter(Precursor == "LVNELTEFAK") %>%
# select(date,Best.RT)
df_ts %>%
time_decompose(Best.RT, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%y %h:%m"))
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%y %h:%m"))
View(df_ts)
View(df_ts)
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%y-%h:%m"))
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%y"))
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%y %H:%m"))
df_ts <- df %>% as.tibble() %>%
mutate(date = as.Date(AcquiredTime, format = "%m/%d/%y %H:%M"))
View(df_ts)
View(df_ts)
df_ts <- df %>% as.tibble() %>%
mutate(date = as.POSIXct(AcquiredTime, format = "%m/%d/%y %H:%M"))
filter(Precursor == "LVNELTEFAK") %>%
select(date,Best.RT)
df_ts <- df %>% as.tibble() %>%
mutate(date = as.POSIXct(AcquiredTime, format = "%m/%d/%y %H:%M")) %>%
filter(Precursor == "LVNELTEFAK") %>%
select(date,Best.RT)
df_ts %>%
time_decompose(Best.RT, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.2) %>%
plot_anomaly_decomposition()
View(df_ts)
View(df_ts)
library(h2o)
h2o.init()
df <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv")
# Import the prostate dataset
CPTAC_full <- h2o.importFile(path = "./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv",
destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Create a testing set from the 2nd dataset in the split
test <- CPTAC_split[[2]]
# Build an Isolation forest model
seed = 12345
ntrees = 100
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
# Calculate score
score <- h2o.predict(model, test)
result_pred <- score$predict
print(score)
# Predict the leaf node assignment
ln_pred <- h2o.predict_leaf_node_assignment(model, test)
show(score)
library(h2o)
h2o.init()
df <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv")
# Import the prostate dataset
CPTAC_full <- h2o.importFile(path = "./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv",
destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Create a testing set from the 2nd dataset in the split
test <- CPTAC_split[[2]]
# Build an Isolation forest model
seed = 12345
ntrees = 100
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
# Calculate score
score <- h2o.predict(model, test)
result_pred <- score$predict
print(score)
# Predict the leaf node assignment
ln_pred <- h2o.predict_leaf_node_assignment(model, test)
View(score)
View(score)
head(score,20)
hist(score$mean_length)
head(score,20)
hist(score$mean_length)
qplot(score$mean_length, geom="histogram")
result_ml <- score$mean_lenght
result_ml <- score$mean_lenght
result_ml <- score$mean_length
result_ml <- as.data.frame(score$mean_length)
View(result_ml)
View(result_ml)
hist(result_ml)
result_ml <- as.vector(score$mean_length)
hist(result_ml)
qplot(result_ml, geom="histogram")
result_pred <- as.vector(score$predict)
qplot(result_pred, geom="histogram")
score <-  as.data.frame(score_h20Obj)
# Calculate score
score_h20Obj <- h2o.predict(model, test)
library(h2o)
h2o.init()
df <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv")
# Import the prostate dataset
CPTAC_full <- h2o.importFile(path = "./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv",
destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Create a testing set from the 2nd dataset in the split
test <- CPTAC_split[[2]]
# Build an Isolation forest model
seed = 12345
ntrees = 100
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
model <- h2o.isolationForest(training_frame=train,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
# Calculate score
score_h20Obj <- h2o.predict(model, test)
# Import the prostate dataset
CPTAC_full <- h2o.importFile(path = "./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv",
destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Create a testing set from the 2nd dataset in the split
test <- CPTAC_split[[2]]
# Build an Isolation forest model
seed = 12345
ntrees = 100
model <- h2o.isolationForest(training_frame=CPTAC_full,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
model <- h2o.isolationForest(training_frame=CPTAC_full,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
# Calculate score
score_h20Obj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h20Obj)
result_pred <- score$predict
result_ml <- score$mean_length
hist(result_ml)
qplot(result_pred, geom="histogram")
quantile_frame <-  score_h20Obj.quantile(conf)
h20::quantile(score_h20Obj,conf)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
result_pred <- score$predict
result_ml <- score$mean_length
head(score,20)
hist(result_ml)
qplot(result_pred, geom="histogram")
conf <-  0.95
h2o::quantile(score_h2oObj,conf)
quantile_frame <-  quantile(score$predict,0.95)
quantile(score$predict,0.95)
score[score$predict>thresh]
thresh <-  quantile(score$predict,0.95)
score[score$predict>thresh]
score[[score$predict>thresh]]
score[which(score$predict>thresh)]
score[[score$predict>thresh],]
score[score$predict>thresh,]
Outliers <- score[score$predict>thresh,]
Outliers
Outliers <- score_h2oObj[score_h2oObj$predict>thresh,]
print(putliers)
print(Outliers)
Outliers <- score_h2oObj[score_h2oObj$predict>thresh,]
Outliers <- score_h2oObj[score_h2oObj$predict>thresh,]
print(out)
print(Outliers)
Outliers <- score[score$predict>thresh,]
print(Outliers)
Outliers1 <- score_h2oObj[score_h2oObj$predict>thresh,]
print(Outliers1)
Outliers <- score[score$predict>thresh,]
print(Outliers)
runApp()
# Import the prostate dataset
CPTAC_full <- h2o.importFile(path = "./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv",
destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
# Create a testing set from the 2nd dataset in the split
test <- CPTAC_split[[2]]
# Build an Isolation forest model
seed = 12345
ntrees = 100
model <- h2o.isolationForest(training_frame=CPTAC_full,
sample_rate = 0.1,
max_depth = 20,
ntrees = 100)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
View(score)
View(score)
View(df)
View(df)
hist(result_ml)
result_pred
qplot(result_pred, geom="histogram")
Outliers <- score[score$predict>thresh,]
Outliers
Outliers1 <- score_h2oObj[score_h2oObj$predict>thresh,]
Outliers1
Outliers
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
